Fish.Dat
Fish.Data
df <- data.frame(#
  trt = factor(c(1, 1, 2, 2)),#
  resp = c(1, 5, 3, 4),#
  group = factor(c(1, 2, 1, 2)),#
  se = c(0.1, 0.3, 0.3, 0.2)#
)#
df2 <- df[c(1,3),]
limits <- aes(ymax = resp + se, ymin=resp - se)
p <- ggplot(df, aes(fill=group, y=resp, x=trt))
p + geom_bar(position="dodge", stat="identity")
dodge <- position_dodge(width=0.9)
p + geom_bar(position=dodge) + geom_errorbar(limits, position=dodge, width=0.25)
df
limits
p + geom_bar(position=dodge) + geom_errorbar(limits, position=dodge, width=0.25)
p + geom_bar(position=dodge,stat="identity") + geom_errorbar(limits, position=dodge, width=0.25)
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.5)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15)) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp + geom_bar(width=0.4, stat="identity",position=dodge)#
   + geom_errorbar(limits, position=dodge, width=0.25)
gp + geom_bar( stat="identity",position=dodge)#
   + geom_errorbar(limits, position=dodge, width=0.25)
gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.position=c(1,.9) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)
?legend.justification
??legend.justification
?theme
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.position="top" ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)
dev.size()
postscript(file="/tmp/fish.eps", width=5, hight=4)#
  gp#
dev.off()
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)
postscript(file="/tmp/fish.eps", width=5, hight=4)#
  gp#
dev.off()
dev.off()
postscript(file="/tmp/fish.eps", width=5, height=4)#
  gp#
dev.off()
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=5, height=4)#
  gp
dev.size()
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.box = "horizontal",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=5, height=4)#
  gp
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.box = "vertical",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=5, height=4)#
  gp
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.direction = "horizontal",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=5, height=4)#
  gp
dev
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
#    legend.justification=c(1,1),#
    legend.direction = "horizontal",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=5, height=4)#
  gp#
#dev.off()
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.direction = "horizontal",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=5, height=4)#
  gp#
#dev.off()
dev.size()
GM.Fish.Exp = data.frame("cell"= "GM12878", "mean" = 320, "sem"= 20)#
K.Fish.Exp = data.frame("cell" = "K562", "mean" = 390, "sem" = 20)#
Fish.Exp = rbind(GM.Fish.Exp, K.Fish.Exp)#
Fish.Exp$type = "Exp"#
#
GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM/length(Dist_GM))) #
K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K)/length(Dist_K))#
Fish.Prd = rbind(GM.Fish.Prd, K.Fish.Prd)#
Fish.Prd$type = "Prd"#
#
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.5)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.direction = "horizontal",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp#
dev.off()
GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM)) #
K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K))#
Fish.Prd = rbind(GM.Fish.Prd, K.Fish.Prd)#
Fish.Prd$type = "Prd"#
#
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.5)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.direction = "horizontal",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp#
dev.off()
GM.Fish.Exp = data.frame("cell"= "GM12878", "mean" = 320, "sem"= 20)#
K.Fish.Exp = data.frame("cell" = "K562", "mean" = 390, "sem" = 20)#
Fish.Exp = rbind(GM.Fish.Exp, K.Fish.Exp)#
Fish.Exp$type = "Exp"#
#
#GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM/length(Dist_GM))) #
#K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K)/length(Dist_K))#
#
GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM)) #
K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K))#
Fish.Prd = rbind(GM.Fish.Prd, K.Fish.Prd)#
Fish.Prd$type = "Prd"#
#
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.5)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.direction = "horizontal",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp#
#dev.off()
GM.Fish.Exp = data.frame("cell"= "GM12878", "mean" = 320, "sem"= NULL)#
K.Fish.Exp = data.frame("cell" = "K562", "mean" = 390, "sem" = NULL)#
Fish.Exp = rbind(GM.Fish.Exp, K.Fish.Exp)#
Fish.Exp$type = "Exp"#
#
#GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM/length(Dist_GM))) #
#K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K)/length(Dist_K))#
#
GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM)) #
K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K))#
Fish.Prd = rbind(GM.Fish.Prd, K.Fish.Prd)#
Fish.Prd$type = "Prd"#
#
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.5)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.direction = "horizontal",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp
na
NA
GM.Fish.Exp = data.frame("cell"= "GM12878", "mean" = 320, "sem"= NA)#
K.Fish.Exp = data.frame("cell" = "K562", "mean" = 390, "sem" = NA)#
Fish.Exp = rbind(GM.Fish.Exp, K.Fish.Exp)#
Fish.Exp$type = "Exp"#
#
#GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM/length(Dist_GM))) #
#K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K)/length(Dist_K))#
#
GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM)) #
K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K))#
Fish.Prd = rbind(GM.Fish.Prd, K.Fish.Prd)#
Fish.Prd$type = "Prd"#
#
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.5)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(1,1),#
    legend.direction = "horizontal",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(0,1),#
    legend.direction = "horizontal",#
    legend.position=c(1,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(0,1),#
    legend.direction = "horizontal",#
    legend.position=c(0,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp
GM.Fish.Exp = data.frame("cell"= "GM12878", "mean" = 320, "sem"= 20)#
#K.Fish.Exp = data.frame("cell" = "K562", "mean" = 390, "sem" = 20)#
GM.Fish.Exp = data.frame("cell"= "GM12878", "mean" = 320, "sem"= NA)#
K.Fish.Exp = data.frame("cell" = "K562", "mean" = 390, "sem" = NA)#
Fish.Exp = rbind(GM.Fish.Exp, K.Fish.Exp)#
Fish.Exp$type = "Exp"#
#
#GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM/length(Dist_GM))) #
#K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K)/length(Dist_K))#
#
GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM)) #
K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K))#
Fish.Prd = rbind(GM.Fish.Prd, K.Fish.Prd)#
Fish.Prd$type = "Prd"#
#
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.5)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=15),#
    legend.justification=c(0,1),#
    legend.direction = "horizontal",#
    legend.position=c(0,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp#
dev.off()
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.85 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=30),#
    legend.justification=c(0,1),#
    legend.direction = "horizontal",#
    legend.position=c(0,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.9 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=30),#
    legend.justification=c(0,1),#
    legend.direction = "horizontal",#
    legend.position=c(0,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.9, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
gp
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.8)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.5 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=30),#
    legend.justification=c(0,1),#
    legend.direction = "horizontal",#
    legend.position=c(0,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.4, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.8)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.5 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=20),#
    legend.justification=c(0,1),#
    legend.direction = "horizontal",#
    legend.position=c(0,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.7, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
#postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp
gp
dev.size()
postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp#
dev.off()
!/usr/bin/R#
#------------------------------------------------------------------#
# ENm008.chain.ClusterPvalue.R#
#------------------------------------------------------------------#
rm(list=ls())#
# library(fpc)#
#------------------------------------------------------------------#
#
GM_cell = "GM12878"#
K_cell = "K562"#
Fish_Seg_1 = c(29779,86128)#
Fish_Seg_2 = c(380160,433293)#
#
#------------------------------------------------------------------#
Mean_Pos_1 = mean(Fish_Seg_1)#
Mean_Pos_2 = mean(Fish_Seg_2)#
#------------------------------------------------------------------#
All_Points_Pos = c(1,5693,15091,18344,29756,44231,50868,55911,64056,74448,88084,95256,100530,104687,109838,123474,131220,134334,147970,161606,167103,171769,185994,189074,203353,217802,225341,238977,247214,260850,274486,277942,289198,303867,310528,314538,327240,334889,348525,352385,360924,372670,380160,393796,407432,418222,421291,433293,445126,454365,468001,483412,496513,499411)#
GetGeneNameAndRange <- function(){#
  FN = "data/ENm008/circos/text.genes.txt"#
  GeneRangeName = read.table(FN)[2:4]#
  PosToName = NULL#
  for (i in 1:length(All_Points_Pos)){#
    pos = All_Points_Pos[i]#
    str = ""#
    for (j in 1:nrow(GeneRangeName)){#
      if (  GeneRangeName[j,1] <= pos && GeneRangeName[j,2] >= pos ){#
        if (str == ""){#
          str = as.character(GeneRangeName[j,3])#
        } else{#
          str = paste(str, as.character(GeneRangeName[j,3]),sep=" / ")#
        }#
      }#
    }#
    # cat (i,"\t",str,"\n")#
    PosToName = rbind(PosToName,c(i,str))#
  }#
  return(PosToName)#
}#
#
PosToName = GetGeneNameAndRange()#
xlabel = apply(PosToName,1,function(x){paste(x[2],x[1])})#
#
#----------------------------------------------------------------------------#
GetClosestEquPointIndFromExpPointPos <- function(ExpPointPos){#
  ExpPointInd = NULL#
  for (i in 1:length(ExpPointPos)){#
    Points_Diff = abs(All_Points_Pos - ExpPointPos[i])#
    ExpPointInd = c(ExpPointInd,which(Points_Diff == min(Points_Diff)))#
  }#
  return (ExpPointInd)#
}#
#
#----------------------------------------------------------------------------#
Node_1 = GetClosestEquPointIndFromExpPointPos(Mean_Pos_1)#
Node_2 = GetClosestEquPointIndFromExpPointPos(Mean_Pos_2)#
#
DataPath = "/Users/yunxu/workspace/projects/chromatin/result/analysis/ENm008/chain/weight.dist/par.1_1_1_1/"#
FN_GM = paste(DataPath,GM_cell,".p1500_d3300/",Node_1,"_",Node_2,".txt",sep="")#
Dist_Weight_GM = read.table(FN_GM)#
Dist_GM = rep(Dist_Weight_GM[,1],Dist_Weight_GM[,2])#
Dist_GM = Dist_GM / 10 # A to nm#
FN_K = paste(DataPath,K_cell,".p1500_d3300/",Node_1,"_",Node_2,".txt",sep="")#
Dist_Weight_K = read.table(FN_K)#
Dist_K = rep(Dist_Weight_K[,1],Dist_Weight_K[,2])#
Dist_K = Dist_K / 10 # A to nm#
#
#----------------------------------------------------------------------------#
library(reshape2)#
library(ggplot2)#
library(RColorBrewer)#
#
#GM.Fish.Exp = data.frame("cell"= "GM12878", "mean" = 320, "sem"= 20)#
#K.Fish.Exp = data.frame("cell" = "K562", "mean" = 390, "sem" = 20)#
GM.Fish.Exp = data.frame("cell"= "GM12878", "mean" = 320, "sem"= NA)#
K.Fish.Exp = data.frame("cell" = "K562", "mean" = 390, "sem" = NA)#
Fish.Exp = rbind(GM.Fish.Exp, K.Fish.Exp)#
Fish.Exp$type = "Exp"#
#
#GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM/length(Dist_GM))) #
#K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K)/length(Dist_K))#
#
GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM)) #
K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K))#
Fish.Prd = rbind(GM.Fish.Prd, K.Fish.Prd)#
Fish.Prd$type = "Prd"#
#
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.8)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.5 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=20),#
    legend.justification=c(0,1),#
    legend.direction = "horizontal",#
    legend.position=c(0,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  coord_cartesian(ylim=c(0,450))#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.7, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp#
dev.off()#
#
q()
!/usr/bin/R#
#------------------------------------------------------------------#
# ENm008.chain.ClusterPvalue.R#
#------------------------------------------------------------------#
rm(list=ls())#
# library(fpc)#
#------------------------------------------------------------------#
#
GM_cell = "GM12878"#
K_cell = "K562"#
Fish_Seg_1 = c(29779,86128)#
Fish_Seg_2 = c(380160,433293)#
#
#------------------------------------------------------------------#
Mean_Pos_1 = mean(Fish_Seg_1)#
Mean_Pos_2 = mean(Fish_Seg_2)#
#------------------------------------------------------------------#
All_Points_Pos = c(1,5693,15091,18344,29756,44231,50868,55911,64056,74448,88084,95256,100530,104687,109838,123474,131220,134334,147970,161606,167103,171769,185994,189074,203353,217802,225341,238977,247214,260850,274486,277942,289198,303867,310528,314538,327240,334889,348525,352385,360924,372670,380160,393796,407432,418222,421291,433293,445126,454365,468001,483412,496513,499411)#
GetGeneNameAndRange <- function(){#
  FN = "data/ENm008/circos/text.genes.txt"#
  GeneRangeName = read.table(FN)[2:4]#
  PosToName = NULL#
  for (i in 1:length(All_Points_Pos)){#
    pos = All_Points_Pos[i]#
    str = ""#
    for (j in 1:nrow(GeneRangeName)){#
      if (  GeneRangeName[j,1] <= pos && GeneRangeName[j,2] >= pos ){#
        if (str == ""){#
          str = as.character(GeneRangeName[j,3])#
        } else{#
          str = paste(str, as.character(GeneRangeName[j,3]),sep=" / ")#
        }#
      }#
    }#
    # cat (i,"\t",str,"\n")#
    PosToName = rbind(PosToName,c(i,str))#
  }#
  return(PosToName)#
}#
#
PosToName = GetGeneNameAndRange()#
xlabel = apply(PosToName,1,function(x){paste(x[2],x[1])})#
#
#----------------------------------------------------------------------------#
GetClosestEquPointIndFromExpPointPos <- function(ExpPointPos){#
  ExpPointInd = NULL#
  for (i in 1:length(ExpPointPos)){#
    Points_Diff = abs(All_Points_Pos - ExpPointPos[i])#
    ExpPointInd = c(ExpPointInd,which(Points_Diff == min(Points_Diff)))#
  }#
  return (ExpPointInd)#
}#
#
#----------------------------------------------------------------------------#
Node_1 = GetClosestEquPointIndFromExpPointPos(Mean_Pos_1)#
Node_2 = GetClosestEquPointIndFromExpPointPos(Mean_Pos_2)#
#
DataPath = "/Users/yunxu/workspace/projects/chromatin/result/analysis/ENm008/chain/weight.dist/par.1_1_1_1/"#
FN_GM = paste(DataPath,GM_cell,".p1500_d3300/",Node_1,"_",Node_2,".txt",sep="")#
Dist_Weight_GM = read.table(FN_GM)#
Dist_GM = rep(Dist_Weight_GM[,1],Dist_Weight_GM[,2])#
Dist_GM = Dist_GM / 10 # A to nm#
FN_K = paste(DataPath,K_cell,".p1500_d3300/",Node_1,"_",Node_2,".txt",sep="")#
Dist_Weight_K = read.table(FN_K)#
Dist_K = rep(Dist_Weight_K[,1],Dist_Weight_K[,2])#
Dist_K = Dist_K / 10 # A to nm#
#
#----------------------------------------------------------------------------#
library(reshape2)#
library(ggplot2)#
library(RColorBrewer)#
#
#GM.Fish.Exp = data.frame("cell"= "GM12878", "mean" = 320, "sem"= 20)#
#K.Fish.Exp = data.frame("cell" = "K562", "mean" = 390, "sem" = 20)#
GM.Fish.Exp = data.frame("cell"= "GM12878", "mean" = 320, "sem"= NA)#
K.Fish.Exp = data.frame("cell" = "K562", "mean" = 390, "sem" = NA)#
Fish.Exp = rbind(GM.Fish.Exp, K.Fish.Exp)#
Fish.Exp$type = "Exp"#
#
#GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM/length(Dist_GM))) #
#K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K)/length(Dist_K))#
#
GM.Fish.Prd = data.frame("cell" = "GM12878", "mean"= mean(Dist_GM), "sem" = sd(Dist_GM)) #
K.Fish.Prd = data.frame("cell" = "K562", "mean"= mean(Dist_K), "sem" = sd(Dist_K))#
Fish.Prd = rbind(GM.Fish.Prd, K.Fish.Prd)#
Fish.Prd$type = "Prd"#
#
Fish.Data = rbind(Fish.Exp, Fish.Prd)#
MyPal = brewer.pal(9,"Set1")#
dodge <- position_dodge(width=.8)#
limits <- aes(ymin = mean - sem, ymax = mean + sem)#
#
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.5 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=20),#
    legend.justification=c(0,1),#
    legend.direction = "horizontal",#
    legend.position=c(0,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  coord_cartesian(ylim=c(0,450)) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.7, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp#
dev.off()
gp <- ggplot(Fish.Data, aes(x=type,y=mean,fill=cell, width=.5 ))#
gp <- gp +#
   theme_bw() +#
  theme(text = element_text(size=20),#
    legend.justification=c(0,1),#
    legend.direction = "horizontal",#
    legend.position=c(0,1) ) +#
  labs(x= paste(""),y = "Distance (nm)") +#
  scale_x_discrete(label=c("FISH","Prediction")) +#
  coord_cartesian(ylim=c(0,500)) +#
  scale_fill_manual("",#
    values = c( "GM12878" = MyPal[1], "K562" = MyPal[2]))#
gp = gp + geom_bar(width=0.7, stat="identity",position=dodge)  + geom_errorbar(limits, position=dodge, width=0.25)#
#
postscript(file="/tmp/fish.eps", width=6, height=4)#
  gp#
dev.off()
120/(120+12)
80/83
10/13
!/usr/bin/R#
####################################################################
# Get contact index according to segment (starting and end)#
####################################################################
#
rm(list=ls())#
#
args <- commandArgs(trailingOnly = TRUE)#
#
if (Sys.info()["sysname"] == "Darwin"){#
	SampleSize    = "p1500_d3300"#
}else{#
	SampleSize    = args[1]#
}#
#
# 10 nm / 28 nm/kb = 357  bp \approx 350  bp#
# BallSeqLen = 350#
# 30 nm / 11 nm/kb =2727#
#
PersistenceLength= as.numeric(sub("p(.*)_d.*","\\1",SampleSize))#
if (PersistenceLength == 600){ # 10 nm diameter#
	BallDiameter    = 100#
	BallSeqLen      = 350#
	SegmentBPLength = 2100#
}else if (PersistenceLength == 900){ # 10 nm diameter#
	BallDiameter    = 100#
	BallSeqLen      = 350#
	SegmentBPLength = 3200#
}else if (PersistenceLength == 1200){ # 10 nm diameter#
	BallDiameter    = 100#
	BallSeqLen      = 350#
	SegmentBPLength = 4300#
}else if (PersistenceLength == 1700){ # 30 nm diameter#
	BallDiameter    = 300#
	BallSeqLen      = 2727#
	SegmentBPLength = 15455#
}else if (PersistenceLength == 1500){ # 30 nm diameter#
	BallDiameter    = 300#
	BallSeqLen      = 2727#
	SegmentBPLength = 13636#
#
}#
#------------------------------------------------------------------#
# Parameter#
#------------------------------------------------------------------#
SourcePath = "data/ENm008/"#
# CELL = "GM12878"#
ReferenceCountFile = paste("data/analysis/ENm008/",SampleSize,".comb.c.txt",sep="")#
cat(ReferenceCountFile, "\n") #
DestDir = "tmp/"#
#
#------------------------------------------------------------------#
# Get MaxRead between GM12878 and K562#
#------------------------------------------------------------------#
ContactFrequencyFile   = paste(SourcePath,"Nature_2010_5CFrequencyCountsMatrix_ENm008_GM12878.txt",#
    sep                = "")#
ContactFrequencyData_1 = read.table(ContactFrequencyFile)#
#
ContactFrequencyFile   = paste(SourcePath,"Nature_2010_5CFrequencyCountsMatrix_ENm008_K562.txt",#
    sep                = "")#
ContactFrequencyData_2 = read.table(ContactFrequencyFile)#
#
#------------------------------------------------------------------#
# Read Contact Frequency#
#------------------------------------------------------------------#
ContactFrequencyData = ContactFrequencyData_1#
#
Row_Ind_Start        = as.numeric(sub(".*chr16:(.*)-(.*)","\\1",rownames(ContactFrequencyData)))#
Row_Ind_End          = as.numeric(sub(".*chr16:(.*)-(.*)","\\2",rownames(ContactFrequencyData)))#
Row_Ind_Diff         = Row_Ind_Start[2:(length(Row_Ind_Start))] - Row_Ind_End[1:(length(Row_Ind_End)-1)] #
#
Col_Ind_Start        = as.numeric(sub(".*chr16\\.(.*)\\.(.*)","\\1",colnames(ContactFrequencyData)))#
Col_Ind_End          = as.numeric(sub(".*chr16\\.(.*)\\.(.*)","\\2",colnames(ContactFrequencyData)))#
Col_Ind_Diff         = Col_Ind_Start[2:(length(Col_Ind_Start))] - Col_Ind_End[1:(length(Col_Ind_End)-1)] #
#------------------------------------------------------------------#
# Reconstruct the reading count matrix, gap is considered.#
#------------------------------------------------------------------#
# Start from Col_Col_Start, Col_Ind_Start = 1#
MinLength            = min(Row_Ind_End-Row_Ind_Start,Col_Ind_End - Col_Ind_Start)#
#
Row_Vec              = cbind(Row_Ind_Start,Row_Ind_End)#
Col_Vec              = cbind(Col_Ind_Start,Col_Ind_End)#
All_Vec              = rbind(Row_Vec,Col_Vec)#
All_Vec_Sort         = sort(All_Vec[,1],index.return=T)#
All_Vec              = All_Vec[All_Vec_Sort$ix,]#
All_Vec_Diff         = (All_Vec[,1])[2:nrow(All_Vec)] - (All_Vec[,2])[1:(nrow(All_Vec)-1)]#
#
# expand the gap sequence length less than min seq length#
MinInd               = which(All_Vec_Diff <MinLength & All_Vec_Diff != 0)#
All_Vec[MinInd,2]    = All_Vec[MinInd,2] + All_Vec_Diff[MinInd]#
All_Vec_Diff[MinInd] = 0#
#
# insert the gap and resort, get segment interval#
Gap_Vec              = cbind((All_Vec[,2])[1:(nrow(All_Vec)-1)], (All_Vec[,2])[1:(nrow(All_Vec)-1)] + All_Vec_Diff)#
All_Vec              = rbind(All_Vec,Gap_Vec[which(All_Vec_Diff!=0),])#
All_Vec_Sort         = sort(All_Vec[,1],index.return=T)#
All_Vec              = All_Vec[All_Vec_Sort$ix,]#
#
nSize                = nrow(All_Vec)#
IntervalPoints       = unique(sort(c(All_Vec)))#
#------------------------------#
# Output Segemntindex NodeStart and NodeEnd#
#------------------------------#
# of_name = paste(DestDir,CELL,".SegInd.Node_StartEnd.txt",sep="")#
# write.table(file=of_name,#
#     cbind(1:nrow(All_Vec),All_Vec),quote=FALSE,row.names=FALSE,col.names=FALSE)#
#
#----------------------------------------------------------------------------#
# Map Experimental Index to equal segment index#
#----------------------------------------------------------------------------#
#------------------------------#
# Persistence length#
#------------------------------#
# Dekker, J. (2008). Mapping in vivo chromatin interactions in yeast suggests an#
# extended chromatin fiber with regional variation in compaction The Journal of#
# biological chemistry, 283(50), 34532-34540. doi:10.1074/jbc.M806479200 the#
# mass density 28 nm/kb the persistence length is 58-118 nm, the mean is 88 nm#
#------------------------------#
# Fussner, E., Ching, R. W., & Bazett-Jones, D. P. (2011). Living without 30nm#
# chromatin fibers. Trends in biochemical sciences, 36(1), 1-6.#
# doi:10.1016/j.tibs.2010.09.002 10 nm chromatin fiber#
#------------------------------#
# 90 nm / 28 nm/kb = 3214 bp \approx 3200 bp 10 nm / 28 nm/kb = 357  bp \approx#
# 350  bp One segment length 88 nm - 10 nm = 78 nm, containing 3000-350 bp the#
# diameter of ball is 10 nm. the ball contains 350 bp#
#------------------------------#
#
EndPoint = max(IntervalPoints)#
NumSegments = ceiling(EndPoint/SegmentBPLength)#
SegmentsInterval = c(1,c(1:NumSegments)*SegmentBPLength)#
#
SegStartEnd.Forward.List = list()#
for (i in 1:nrow(All_Vec)){#
    SegStartEndInd = findInterval(All_Vec[i,], SegmentsInterval)#
    SegStartEnd.Forward.List[[i]] <- c(SegStartEndInd[1] : SegStartEndInd[2])#
}#
#
SegStartEnd.Reverse.List = list()#
for (i in 1:NumSegments) {#
    SegStartEnd.Reverse.List[[i]] = seq_along(SegStartEnd.Forward.List)[sapply(SegStartEnd.Forward.List, FUN=function(X) i %in% X)] #
}
ls()
----------------------------------------------------------------------------#
MapRawData <- function(CFData){#
	# remove small length segment#
	# only some row index, because#
	IgnoredRow_Ind    = which(Row_Ind_End-Row_Ind_Start <= BallSeqLen)#
	NewRow_Ind        = setdiff(1:length(Row_Ind_End),IgnoredRow_Ind)#
	# column index do not change#
	IgnoredCol_Ind    = which(Col_Ind_End-Col_Ind_Start <= BallSeqLen)#
	NewCol_Ind        = setdiff(1:length(Col_Ind_Start),IgnoredCol_Ind)#
#
	REVERSE_POS       = Col_Ind_End[NewCol_Ind]#
	REVERSE_POS_END   = Col_Ind_End[NewCol_Ind]#
	REVERSE_POS_START = Col_Ind_Start[NewCol_Ind]#
#
	FORWARD_POS       = Row_Ind_End[NewRow_Ind]#
	FORWARD_POS_START = Row_Ind_Start[NewRow_Ind]#
	FORWARD_POS_END   = Row_Ind_End[NewRow_Ind]#
#
	CFData            = CFData[NewRow_Ind,NewCol_Ind]#
#
	SparseData = NULL#
	for (i in 1:length(FORWARD_POS)){#
		for (j in 1:length(REVERSE_POS)){#
			ipos        = FORWARD_POS[i]#
			ipos_start  = FORWARD_POS_START[i]#
			ipos_end    = FORWARD_POS_END[i]#
			jpos        = REVERSE_POS[j]#
			jpos_start  = REVERSE_POS_START[j]#
			jpos_end    = REVERSE_POS_END[j]#
			# remove neighbor node#
			if (ipos_end == jpos_start || ipos_start == jpos_end) {#
				cat(#
					paste("F",which(Row_Ind_End == FORWARD_POS_END[i]),"-","R",which(Col_Ind_End == REVERSE_POS_END[j]),sep=""),"\t",#
					paste(FORWARD_POS_END[i],"-",REVERSE_POS_END[j],sep=""),"\t",CFData[i,j],"\n")#
				next;#
			}#
			# if (ipos_start == jpos_end) {cat("F",i,"-",FORWARD_POS_END[i],"R",j,"-",REVERSE_POS_END[j],"\t",CFData[i,j],"\n"); next;}#
			if (ipos < jpos){#
				SparseData = rbind(SparseData,c(ipos,jpos,CFData[i,j]))#
			}else{#
				SparseData = rbind(SparseData,c(jpos,ipos,CFData[i,j]))#
#
			}#
		}#
	}#
#
	# sort first and second#
	SparseData = SparseData[sort.int(SparseData[,1],index.return=T)$ix,]#
	SparseData = SparseData[sort.int(SparseData[,2],index.return=T)$ix,]#
	return (SparseData)#
}#
#
CFData_1 = MapRawData(ContactFrequencyData_1)#
CFData_2 = MapRawData(ContactFrequencyData_2)
CFData_1
ContactFrequencyData_1
dim(ContactFrequencyData_1)
30*25
options()
library("tikzDevice")
getOption()
getOption("PATH")
Sys.getenv("PATH")
q(0)
q()
!/usr/bin/R#
rm(list=ls())#
#------------------------------------------------------------------#
library(grid)#
library(gridExtra)#
library(lattice)#
library(RColorBrewer)#
library(reshape)#
library(ggplot2)#
library(fpc)#
#------------------------------------------------------------------#
args <- commandArgs(trailingOnly = TRUE)#
if (Sys.info()["sysname"] == "Darwin"){#
  CELL = "K562"#
  CELL = "GM12878"#
}else{#
  CELL = args[1]#
}#
#
#------------------------------------------------------------------#
NumNodes = 54#
DistCutoff = 840#
Type="con"#
method = "cut.all"#
#------------------------------------------------------------------#
ConDir=paste("/Users/yunxu/workspace/projects/chromatin/result/analysis/ENm008/chain/",method,"/par.1_1_1_1/",CELL,".p1500_d3300",sep="")#
# ConDir=paste("/dump/yunxu/working/projects.new/chromatin/result/analysis/ENm008/chain/",method,"/par.1_1_1_1/",CELL,".p1500_d3300",sep="")#
#----------------------------------------------------------------------------#
GetGeneNameAndRange <- function(){#
  All_Points_Pos = c(1,5693,15091,18344,29756,44231,50868,55911,64056,74448,88084,95256,100530,104687,109838,123474,131220,134334,147970,161606,167103,171769,185994,189074,203353,217802,225341,238977,247214,260850,274486,277942,289198,303867,310528,314538,327240,334889,348525,352385,360924,372670,380160,393796,407432,418222,421291,433293,445126,454365,468001,483412,496513,499411)#
  FN = "data/ENm008/circos/text.genes.txt"#
  GeneRangeName = read.table(FN)[2:4]#
  PosToName = NULL#
  for (i in 1:length(All_Points_Pos)){#
    pos = All_Points_Pos[i]#
    str = ""#
    for (j in 1:nrow(GeneRangeName)){#
      if (  GeneRangeName[j,1] <= pos && GeneRangeName[j,2] >= pos ){#
        if (str == ""){#
          str = as.character(GeneRangeName[j,3])#
        } else{#
          str = paste(str, as.character(GeneRangeName[j,3]),sep=" / ")#
        }#
      }#
    }#
    # cat (i,"\t",str,"\n")#
    PosToName = rbind(PosToName,c(i,str))#
  }#
  return(PosToName)#
}#
#
#----------------------------------------------------------------------------#
PosToName = GetGeneNameAndRange()#
xlabel = apply(PosToName,1,function(x){paste(x[2],x[1])})#
xlabel = seq(1,54,by=1)#
xlabel = seq(5,54,by=5)#
#
#------------------------------------------------------------------#
GetSignificantMat <- function(mat, sig){#
#  mat = PijMat#
#  sig = Overlap.Con.All#
  for (i in 1:(NumNodes-2)){#
    for (j in (i+2):NumNodes){#
      # in significant calculation, I use <= may miss the pij = 0#
      # so here consider pij=0 situation#
      if (length( which(sig[,1]==i & sig[,2]==j ) )==0){#
        mat[i,j] = NA#
      }#
    }#
  }#
  return(mat)#
}#
#------------------------------------------------------------------#
Get_PijMat_ByCell <- function(cell){#
#
  WeightDistPath = paste("/Users/yunxu/workspace/projects/chromatin/result/analysis/ENm008/chain/weight.dist/par.1_1_1_1/",cell,".p1500_d3300",sep="")#
  #------------------------------------------------------------------#
  Pair_Vec = t(combn(1:NumNodes,2))#
  Pair_Vec = Pair_Vec[Pair_Vec[,2]-Pair_Vec[,1]!=1,]#
  #------------------------------------------------------------------#
  # Get Pij of chain#
  FileList = apply(Pair_Vec,1,function(x){#
          paste(WeightDistPath,"/",paste(x,collapse="_"), ".txt",sep="")})#
  SampleFile = FileList[1]#
  SampleData = read.table(SampleFile)#
  NRow = nrow(SampleData)#
  NCol = length(FileList)#
  Weight_Vec = SampleData[,2]#
  DistMat = matrix(0, nrow=NRow, ncol=NCol)#
  SignMat = DistMat#
  for (i in 1:NCol){#
    FN = FileList[i]#
    WeightDistData = read.table(FN)#
    DistMat[,i] = WeightDistData[,1]#
  }#
  SignMat[DistMat<DistCutoff] = 1#
  Pij = apply(SignMat,2,function(x){#
    SignInd = which(x==1)        #
    sum(Weight_Vec[SignInd])/sum(Weight_Vec)#
          })#
  PijMat = matrix(NA,nrow=NumNodes,ncol=NumNodes)#
  for (i in 1:(NumNodes-2)){#
    for (j in (i+2):NumNodes){#
      idx = which(Pair_Vec[,1] == i & Pair_Vec[,2] == j)#
      PijMat[i,j] = Pij[idx]#
    }#
  }#
  #------------------------------------------------------------------#
  SignificantPath = "/Users/yunxu/workspace/projects/chromatin/result/analysis/ENm008/chain/sts/pij/"#
  OverlapFN.Common = paste(SignificantPath,cell,".p1500_d3300.c840.common.a1.",Type,".txt",sep="")#
  OverlapFN.New = paste(SignificantPath,cell,".p1500_d3300.c840.new.a1.",Type,".txt",sep="")#
  Overlap.Con.Common = read.table(OverlapFN.Common)#
  Overlap.Con.New = read.table(OverlapFN.New)#
  Overlap.Con.All = rbind(Overlap.Con.Common, Overlap.Con.New)#
  PijMat_Sig = GetSignificantMat(PijMat,Overlap.Con.All)#
  PijMat_Sig[PijMat_Sig==0] = NA#
  return(PijMat_Sig)#
}#
#
PijMat_Sig_GM = Get_PijMat_ByCell("GM12878")#
PijMat_Sig_K = Get_PijMat_ByCell("K562")#
#------------------------------------------------------------------#
# Drawing triangle#
#------------------------------------------------------------------#
#------------------------------------------------------------------#
OutDir = "tmp1"#
#------------------------------------------------------------------#
#------------------------------------------------------------------#
#------------------------------------------------------------------#
#------------------------------------------------------------------#
#------------------------------------------------------------------#
#------------------------------------------------------------------#
#------------------------------------------------------------------#
dbscan.greater <- function (data, eps, MinPts = 5, scale = FALSE, method = c("hybrid", #
    "raw", "dist"), seeds = TRUE, showplot = FALSE, countmode = NULL) #
{#
    distcomb <- function(x, data) {#
        data <- t(data)#
        temp <- apply(x, 1, function(x) {#
            sqrt(colSums((data - x)^2))#
        })#
        if (is.null(dim(temp))) #
            matrix(temp, nrow(x), ncol(data))#
        else t(temp)#
    }#
    method <- match.arg(method)#
    data <- as.matrix(data)#
    n <- nrow(data)#
    if (scale) #
        data <- scale(data)#
    classn <- cv <- integer(n)#
    isseed <- logical(n)#
    cn <- integer(1)#
    for (i in 1:n) {#
        if (i %in% countmode) #
            cat("Processing point ", i, " of ", n, ".\n")#
        unclass <- (1:n)[cv < 1]#
        if (cv[i] == 0) {#
            if (method == "dist") {#
                reachables <- unclass[data[i, unclass] >= eps]#
            }#
            else {#
                reachables <- unclass[as.vector(distcomb(data[i, #
                  , drop = FALSE], data[unclass, , drop = FALSE])) >= #
                  eps]#
            }#
            if (length(reachables) + classn[i] < MinPts) #
                cv[i] <- (-1)#
            else {#
                cn <- cn + 1#
                cv[i] <- cn#
                isseed[i] <- TRUE#
                reachables <- setdiff(reachables, i)#
                unclass <- setdiff(unclass, i)#
                classn[reachables] <- classn[reachables] + 1#
                while (length(reachables)) {#
                  if (showplot) #
                    plot(data, col = 1 + cv, pch = 1 + isseed)#
                  cv[reachables] <- cn#
                  ap <- reachables#
                  reachables <- integer()#
                  if (method == "hybrid") {#
                    tempdist <- distcomb(data[ap, , drop = FALSE], #
                      data[unclass, , drop = FALSE])#
                    frozen.unclass <- unclass#
                  }#
                  for (i2 in seq(along = ap)) {#
                    j <- ap[i2]#
                    if (showplot > 1) #
                      plot(data, col = 1 + cv, pch = 1 + isseed)#
                    if (method == "dist") {#
                      jreachables <- unclass[data[j, unclass] >= #
                        eps]#
                    }#
                    else if (method == "hybrid") {#
                      jreachables <- unclass[tempdist[i2, match(unclass, #
                        frozen.unclass)] >= eps]#
                    }#
                    else {#
                      jreachables <- unclass[as.vector(distcomb(data[j, #
                        , drop = FALSE], data[unclass, , drop = FALSE])) >= #
                        eps]#
                    }#
                    if (length(jreachables) + classn[j] >= MinPts) {#
                      isseed[j] <- TRUE#
                      cv[jreachables[cv[jreachables] < 0]] <- cn#
                      reachables <- union(reachables, jreachables[cv[jreachables] == #
                        0])#
                    }#
                    classn[jreachables] <- classn[jreachables] + #
                      1#
                    unclass <- setdiff(unclass, j)#
                  }#
                }#
            }#
        }#
        if (!length(unclass)) #
            break#
    }#
    rm(classn)#
    if (any(cv == (-1))) {#
        cv[cv == (-1)] <- 0#
    }#
    if (showplot) #
        plot(data, col = 1 + cv, pch = 1 + isseed)#
    out <- list(cluster = cv, eps = eps, MinPts = MinPts)#
    if (seeds && cn > 0) {#
        out$isseed <- isseed#
    }#
    class(out) <- "dbscan"#
    out#
}#
#
#------------------------------------------------------------------#
get.cluster.dbscan <- function(pijmat,eps,MinPts,cell){#
  # pijmat is upper triangle matrix#
  #pijmat <- PijMat_Sig#
  pijmat[is.na(pijmat)] = 0#
  Node.Mat <- pijmat + t(pijmat)#
  Node.Dist <- as.dist(Node.Mat)#
  Node.CI <- colSums(Node.Mat)#
  dbs <- dbscan.greater(Node.Dist,eps=eps,MinPts=MinPts,method="dist")#
  df <- data.frame("NodeIndex"=1:length(Node.CI),"CI"=Node.CI, "eps" = eps, "MinPts" = MinPts, "cluster" = as.numeric(dbs$cluster), "isseed"=as.factor(if(is.null(dbs$isseed)){F}else{dbs$isseed}),"cell"=as.factor(cell))#
  return(df)#
}#
#
#------------------------------------------------------------------#
#
MyPal = brewer.pal(9,"Set1")#
EPS = 0.6#
MINPTS = 7#
df_GM = get.cluster.dbscan(PijMat_Sig_GM, eps = EPS, MinPts=MINPTS, cell="GM12878")#
df_K = get.cluster.dbscan(PijMat_Sig_K, eps = EPS, MinPts=MINPTS, cell="K562") #
df_K[df_K["cluster"]==1,"cluster"] =2#
df = rbind(df_GM, df_K)#
df$cluster <- as.factor(df$cluster)#
#
gp = ggplot(data=df, aes(x=NodeIndex,y=CI,color=cluster))#
gp = gp +#
  theme_bw() +#
  theme(#
    text = element_text(size=25),#
    axis.title.x=element_text(vjust=-1)#
    #axis.text.x=element_text(angle=30, hjust=1,vjust=1)#
  ) +#
  #scale_x_discrete(label=xlabel) +#
  scale_x_discrete(breaks=xlabel,label=xlabel) +#
  scale_y_discrete(breaks=seq(0,15,by=5),label=seq(0,15,by=5)) +#
  coord_cartesian(ylim=c(-1,17)) +#
  labs(x= paste("Primer sites"),y = "Contact Index")#
#
gp = gp + geom_line(size=1, colour="grey") +#
  #geom_point(aes(colour = as.factor(cluster), shape = isseed),size=2 ) +#
  #geom_point(data=subset(df,cluster %in% c(1,2)),aes(colour = cluster, shape = isseed),size=2.5 ) +#
  geom_point(aes(colour = as.factor(cluster), shape = isseed),size=5 ) +#
  geom_point(data=subset(df,cluster %in% c(1,2)),aes(colour = cluster, shape =#
                                                     isseed),size=4.5 ) +#
  scale_colour_manual(name="Cluster",values=c("black",MyPal) )+#
  scale_shape_manual(name="Primer Site",labels=c("border/\nnoise","core"),values=c(1,17))
dev.new(width=14,height=4.5)#
  gp + facet_grid(cell~.)#
dev.copy2eps(file="/tmp/dbcluster.eps")#
#postscript("/tmp/dbcluster.eps",width=14,height=4.5)#
dev.off()
gp + facet_grid(cell~.)
gp <- ggplot(data=df, aes(x=NodeIndex,y=CI,color=cluster))#
gp = gp +#
  theme_bw() +#
  theme(#
    text = element_text(size=25),#
    axis.title.x=element_text(vjust=-1),#
    #axis.text.x=element_text(angle=30, hjust=1,vjust=1)#
    legend.position = "none"#
  ) +#
  #scale_x_discrete(label=xlabel) +#
  scale_x_discrete(breaks=xlabel,label=xlabel) +#
  scale_y_discrete(breaks=seq(0,15,by=5),label=seq(0,15,by=5)) +#
  coord_cartesian(ylim=c(-1,17)) +#
  labs(x= paste("Primer sites"),y = "Contact Index")#
#
gp = gp + geom_line(size=1, colour="grey") +#
  #geom_point(aes(colour = as.factor(cluster), shape = isseed),size=2 ) +#
  #geom_point(data=subset(df,cluster %in% c(1,2)),aes(colour = cluster, shape = isseed),size=2.5 ) +#
  geom_point(aes(colour = as.factor(cluster), shape = isseed),size=5 ) +#
  geom_point(data=subset(df,cluster %in% c(1,2)),aes(colour = cluster, shape =#
                                                     isseed),size=4.5 ) +#
  scale_colour_manual(name="Cluster",values=c("black",MyPal) )+#
  scale_shape_manual(name="Primer Site",labels=c("border/\nnoise","core"),values=c(1,17))
gp + facet_grid(cell~.)
dev.new(width=17,height=4)#
dev.new(width=14,height=4.5)#
  gp + facet_grid(cell~.)#
dev.copy2eps(file="/tmp/dbcluster.eps")#
#postscript("/tmp/dbcluster.eps",width=14,height=4.5)#
dev.off()
setwd("/Users/yunxu/workspace/tex/Draft/2012.12.22.Chromatin.Structure.Modeling/rawfig/script")
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df, aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.2,#
  inherit.aes=FALSE)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
install.packages("ggplot2")
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df, aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.2,#
  inherit.aes=FALSE)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df, aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 1,#
  inherit.aes=FALSE)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df, aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  color = "black",#
  alpha = 0,#
  inherit.aes=FALSE)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df, aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
df
df[-9,]
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df[-9,], aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
df[-9,]
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
df.exclude.alpha = df[-9,]#
gp = ggplot(df.exclude.alpha,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
df.exclude.alpha = df[-9,]#
gp = ggplot(df.exclude.alpha,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df.exclude.alpha[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
df.exclude.alpha = df[-9,]#
gp = ggplot(df.exclude.alpha,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df.exclude.alpha[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  fill=MyPal[1],#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  fill=MyPal[1],#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  fill=MyPal[1],#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  fill=MyPal[1],#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.1,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
#gp = gp + geom_rect(fill=MyPal[3],#
                    #alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.1,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
#gp = gp + geom_rect(fill=MyPal[3],#
                    #alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
#gp = gp + geom_rect(fill=MyPal[3],#
                    #alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.05,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
#gp = gp + geom_rect(fill=MyPal[3],#
                    #alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.01,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
#gp = gp + geom_rect(fill=MyPal[3],#
                    #alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.05,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  fill=MyPal[1],#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.05,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  fill=MyPal[1],#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.01,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  fill=MyPal[1],#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.1,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
colors()
grep("red",colors())
colors[grep("red",colors())]
grep("red",colors())
aa = grep("red",colors())
aa
colors()[aa]
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  fill=MyPal[1],#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="darkred",#
  alpha = 0.1,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
help(colors)
demo(colors)
colors()[aa]
aa = grep("red",colors())
colors()[aa]
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  fill=MyPal[1],#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_rect(fill=MyPal[3],#
                    alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red1",#
  alpha = 0.1,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
aa = grep("red",colors())
colors()[aa]
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
#gp = gp + geom_rect(fill=MyPal[3],#
                    #alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  fill="red",#
  alpha = 0.5,#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
#gp = gp + geom_rect(fill=MyPal[3],#
                    #alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX,alpha=0.5),#
  fill="red",#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX),#
  #fill=MyPal[1],#
  #alpha = 0.5,#
  #inherit.aes=FALSE)#
#gp = gp + geom_rect(fill=MyPal[3],#
                    #alpha=0.5)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX,alpha=0.5,#
  fill="red"),#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
  aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX,#
  fill=MyPal[1],#
  alpha = 0.5),#
  inherit.aes=FALSE)#
gp = gp + geom_rect(aes(fill=MyPal[3],#
                    alpha=0.5))#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX,alpha=0.5,#
  fill="red"),#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX,#
  #fill=MyPal[1],#
  #alpha = 0.5),#
  #inherit.aes=FALSE)#
#gp = gp + geom_rect(aes(fill=MyPal[3],#
                    #alpha=0.5))#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX,alpha=0.5,#
  fill="red"),#
  inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
df
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.noaplpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(data=df.noalpha,#
                    aes(fill=MyPal[3],#
                    alpha=0.5))
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(data=df.no.alpha,#
                    aes(fill=MyPal[3],#
                    alpha=0.5))
gp
df.no.alpha
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(data=df.no.alpha,#
                    aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX,fill=MyPal[3],#
                    alpha=0.5))
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(data=df.no.alpha,#
                    aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX,fill=MyPal[3],#
                    alpha=0.5),inherit.aes=F)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)
gp
MyPal[3]
brewer.pal(3,"Blues")
?geom.rect
?geom_rect
gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX,fill=MyPal[3],#
          alpha=0.5),inherit.aes=FALSE)
gp
MyPal[3]
df.no.alpha
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX,fill=MyPal[3],#
          alpha=0.5),inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX#
          ),inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX,fill="red"#
          ),inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX,fill="blue"#
          ),inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX,fill="blue"),#
          inherit.aes=FALSE)
gp
df.no.alpha
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df.no.alpha,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX,fill="blue"),#
          inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="blue",inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX,alpha=0.5),fill="blue",inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="blue",alpha=0.5,inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="blue",alpha=0.5,inherit.aes=FALSE)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX,#
  #fill=MyPal[1],#
  #alpha = 0.5),#
  #inherit.aes=FALSE)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX,alpha=0.5,#
  fill="red"),#
  inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="blue",alpha=0.5,inherit.aes=FALSE)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX,#
  #fill=MyPal[1],#
  #alpha = 0.5),#
  #inherit.aes=FALSE)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  alpha=0.5,#
  fill="red",#
  inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
#gp = gp + geom_rect(#
  #aes(xmin=XMIN,xmax=XMAX,ymin=YMIN,ymax=YMAX,#
  #fill=MyPal[1],#
  #alpha = 0.5),#
  #inherit.aes=FALSE)#
gp = gp + geom_rect(#
  aes(xmin=df[9,1],xmax=df[9,2],ymin=YMIN,ymax=YMAX),#
  alpha=0.5,#
  fill="red",#
  inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.9,inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.9,inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.2,inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)
gp
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.5,inherit.aes=FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
          #data=df.no.alpha,#
          #aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.5,inherit.aes=FALSE)
gp
df
unlist(df[,1:2])
c(unlist(df[,1:2]))
as.vector(df[,1:2])
unlist(as.vector(df[,1:2]))
unique(unlist(as.vector(df[,1:2])))
sort(unique(unlist(as.vector(df[,1:2]))))
allpoint = sort(unique(unlist(as.vector(df[,1:2]))))
allpoint
?intersect
setdiff(allpoint,df[,1])
allpoint = c(1,sort(unique(unlist(as.vector(df[,1:2])))))#
  setdiff(allpoint,df[,1])
allpoints = c(1,sort(unique(unlist(as.vector(df[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])
misspoints
allpoints - misspoints
allpoints - misspoints[1]
allpoints - misspoints[2]
allpoints - misspoints[7]
ZeroInd = which(allpoints - misspoints[i] == 0)
i = 1
ZeroInd = which(allpoints - misspoints[i] == 0)
ZeroInd
allpoints = c(1,sort(unique(unlist(as.vector(df[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    allpoints[ZeroInd+1]#
  }
for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
print(    allpoints[ZeroInd+1])#
  }
allpoints = c(1,sort(unique(unlist(as.vector(df[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(is.na(NextPos){#
      print(NextPos)#
      }#
  }
for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      print(NextPos)#
      }#
  }
misspoints
FillGap <- function(DataFrame){#
  allpoints = c(1,sort(unique(unlist(as.vector(DataFrame[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  nextpoints = NULL#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      nextpoints = c(nextpoints, NextPos)#
    }#
  }#
  return(data.frame(x1=misspoints,x2=nextpoints))#
}#
df.other = FillGap(df)
df.gap = data.frame(NULL)
df.gap
df.gap = data.frame(x1=NULL,x2=NULL)
df.gap
DataFrame = df
allpoints = c(1,sort(unique(unlist(as.vector(DataFrame[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(misspoints[i],nextPos)#
    }#
  }
df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(misspoints[i],nextPos)#
    }#
  }
df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(misspoints[i],NextPos)#
    }#
  }
df.gap
misspoints
df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(df.gap,c(misspoints[i],NextPos))#
    }#
  }
df.gap
colnames(df.gap)
colnames(df.gap) = c("x1","x2")
df.gap
FillGap <- function(DataFrame){#
  allpoints = c(1,sort(unique(unlist(as.vector(DataFrame[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(df.gap,c(misspoints[i],NextPos))#
    }#
  }#
  colnames(df.gap) = c("x1","x2")#
  return(df.gap)#
}#
df.other = FillGap(df)
df.other
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
FillGap <- function(DataFrame){#
  allpoints = c(1,sort(unique(unlist(as.vector(DataFrame[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(df.gap,c(misspoints[i],NextPos))#
    }#
  }#
  colnames(df.gap) = c("x1","x2")#
  return(df.gap)#
}#
df.other = FillGap(df)#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
          #data=df.no.alpha,#
          #aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.other,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[1],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.5,inherit.aes=FALSE)
gp
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)
gp
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
FillGap <- function(DataFrame){#
  allpoints = c(1,sort(unique(unlist(as.vector(DataFrame[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(df.gap,c(misspoints[i],NextPos))#
    }#
  }#
  colnames(df.gap) = c("x1","x2")#
  return(df.gap)#
}#
df.other = FillGap(df)#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
          #data=df.no.alpha,#
          #aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.other,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[1],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
FillGap <- function(DataFrame){#
  allpoints = c(1,sort(unique(unlist(as.vector(DataFrame[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(df.gap,c(misspoints[i],NextPos))#
    }#
  }#
  colnames(df.gap) = c("x1","x2")#
  return(df.gap)#
}#
df.other = FillGap(df)#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
          #data=df.no.alpha,#
          #aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.other,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[1],alpha=0.5,inherit.aes=FALSE#
          color="black")#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
FillGap <- function(DataFrame){#
  allpoints = c(1,sort(unique(unlist(as.vector(DataFrame[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(df.gap,c(misspoints[i],NextPos))#
    }#
  }#
  colnames(df.gap) = c("x1","x2")#
  return(df.gap)#
}#
df.other = FillGap(df)#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
          #data=df.no.alpha,#
          #aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.other,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[1],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
?arrow
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
FillGap <- function(DataFrame){#
  allpoints = c(1,sort(unique(unlist(as.vector(DataFrame[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(df.gap,c(misspoints[i],NextPos))#
    }#
  }#
  colnames(df.gap) = c("x1","x2")#
  return(df.gap)#
}#
df.other = FillGap(df)#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
          #data=df.no.alpha,#
          #aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.other,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[1],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches"),type="close"),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
FillGap <- function(DataFrame){#
  allpoints = c(1,sort(unique(unlist(as.vector(DataFrame[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(df.gap,c(misspoints[i],NextPos))#
    }#
  }#
  colnames(df.gap) = c("x1","x2")#
  return(df.gap)#
}#
df.other = FillGap(df)#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
          #data=df.no.alpha,#
          #aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.other,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[1],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches"),type="closed"),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches")),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
!/usr/bin/R#
# --------------------------------------------------------------------#
rm(list=ls())#
# --------------------------------------------------------------------#
library(grid)#
library(ggplot2)#
library(RColorBrewer)#
# --------------------------------------------------------------------#
#
DataPath = "../circos/workspace/beadstring.2"#
# gene name#
File_genename = paste(DataPath,"/etc/text.genes.txt",sep="")#
# Forward file#
File_forwardSegment = paste(DataPath,"/etc/raw.segment.for.highlight.txt",sep="")#
# Reverse file#
File_reverseSegment = paste(DataPath,"/etc/raw.segment.rev.highlight.txt",sep="")#
# true primer site file#
File_trueprimer = paste(DataPath,"/etc/primer.sep.highlight.txt",sep="")#
# virtual primer site file#
File_virtualprimer = paste(DataPath, "/etc/primer.additional.node.highlight.txt",sep="")#
#
# --------------------------------------------------------------------#
gene_range = read.table(File_genename)#
df <- data.frame(#
      x1 = gene_range[,2],#
      x2 = gene_range[,3],#
      name = gene_range[,4])#
gene_sepposition = unique(unlist(gene_range[,2:3]))#
XLeftLim = -2000#
XMIN = 0#
XMAX = max(gene_sepposition)#
YMIN = 700#
YMAX = YMIN + 100#
YTick = YMAX + 20#
YLabel = YMAX + 50#
YText = YMIN -20#
XAnnotation = -2000#
#
MyPal = brewer.pal(3,"Blues")#
ticks = seq(1e5,5e5,by=1e5)#
df.ticks = data.frame(x=ticks,label=sprintf("%1.0f",ticks/1000))#
#
# --------------------------------------------------------------------#
FillGap <- function(DataFrame){#
  allpoints = c(1,sort(unique(unlist(as.vector(DataFrame[,1:2])))))#
  misspoints = setdiff(allpoints,df[,1])#
  df.gap = data.frame(x1=NULL,x2=NULL)#
  for (i in 1:length(misspoints)){#
    ZeroInd = which(allpoints - misspoints[i] == 0)#
    NextPos = allpoints[ZeroInd+1]#
    if(!is.na(NextPos)){#
      #nextpoints = c(nextpoints, NextPos)#
      df.gap = rbind(df.gap,c(misspoints[i],NextPos))#
    }#
  }#
  colnames(df.gap) = c("x1","x2")#
  return(df.gap)#
}#
df.other = FillGap(df)#
df.alpha = df[9,]#
df.no.alpha = df[-9,]#
# --------------------------------------------------------------------#
# gene band#
gp = ggplot(df,aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX)) +#
  theme_bw() +#
  theme(#
    plot.background = element_blank(),#
    panel.background = element_blank(),#
    axis.ticks = element_blank(),#
    axis.title.x = element_blank(),#
    axis.title.y = element_blank(),#
    axis.text =  element_blank(),#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    panel.border = element_blank()) +#
    scale_x_continuous(limits = c(XLeftLim, XMAX+1e4)) +#
    scale_y_continuous(limits = c(0, 2000))#
gp = gp + geom_text(aes(x=rowMeans(df[,1:2]), y =#
                        YText,label=name),angle=90,hjust=1,size=6)#
#gp = gp + geom_rect(#
          #data=df.no.alpha,#
          #aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.other,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[1],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.no.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill=MyPal[3],alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_rect(#
          data=df.alpha,#
          aes(xmin=x1,xmax=x2,ymin=YMIN,ymax=YMAX),fill="red",alpha=0.5,inherit.aes=FALSE)#
gp = gp + geom_segment(#
  data=data.frame(x=gene_sepposition),#
  aes(x=x,xend=x,y=YMIN,yend=YMAX),#
  color="white",#
  inherit.aes = FALSE)#
gp = gp + geom_text(data=df.ticks,aes(x=ticks, y = YLabel, label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=0)#
gp = gp + annotate("text",x=XMAX+1e4, y = YLabel, label="Kbp",size=6#
                   ,angle=90,hjust=0)#
gp = gp + geom_segment(#
  data = df.ticks,#
  aes(x=ticks,xend=ticks,y=YTick,yend=YTick+25),#
  inherit.aes = FALSE)#
#
gp = gp + annotate("text", label = "gene", x = XAnnotation, y =#
                   mean(c(YMIN,YMAX)), size = 6, hjust=1)#
# --------------------------------------------------------------------#
# forward segment#
seg_forward = read.table(File_forwardSegment)#
df.for = data.frame(x1 = seg_forward[,2], #
  x2 = seg_forward[,3])#
## --------------------------------------------------------------------#
## reverse segment#
seg_reverse= read.table(File_reverseSegment)#
df.rev = data.frame(x1 = seg_reverse[,2], #
  x2 = seg_reverse[,3])#
# --------------------------------------------------------------------#
#  nodes#
node_true = read.table(File_trueprimer)#
df.true = data.frame(x=rowMeans(node_true[,2:3]))#
Y_PrimerSeg = mean(c(YMIN,YMAX))+ 500#
YMIN_Segment = Y_PrimerSeg - 50#
YMAX_Segment = Y_PrimerSeg + 50#
#
# --------------------------------------------------------------------#
# double strand#
MyPal = brewer.pal(9,"Blues")#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Segment,ymax=Y_PrimerSeg),fill=MyPal[3],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(5e5,5e5-1e4,5e5-1e4),#
               y = c(YMIN_Segment,YMIN_Segment,YMIN_Segment-5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[3],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(5e5,5e5-1e4),y=c(Y_PrimerSeg,Y_PrimerSeg-1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[4],#
          ##alpha=0.5,#
          #inherit.aes=F)#
#
gp = gp +#
geom_rect(aes(xmin=0,xmax=5e5,ymin=Y_PrimerSeg,ymax=YMAX_Segment),fill=MyPal[4],alpha=0.5,inherit.aes=F)#
gp = gp + geom_polygon(#
          data = data.frame(#
               x = c(0,0+1e4,0+1e4),#
               y = c(YMAX_Segment,YMAX_Segment,YMAX_Segment+5e1)),#
          aes(x=x,y=y),#
          fill = MyPal[4],#
          #alpha = 0.5,#
          inherit.aes=F) #
#gp = gp +#
#geom_line(data=data.frame(x=c(0,1e4),y=c(Y_PrimerSeg,Y_PrimerSeg+1e2)),#
          #aes(x=x,y=y),#
          #size = 2,#
          #color = MyPal[6],#
          ##alpha=0.5,#
          #inherit.aes=F)#
# --------------------------------------------------------------------#
# forward arrow#
Y_True_For_Arrow = YMIN_Segment #
Y_Arrow_Offset = 100#
X_True_For = intersect(df.true[,1],df.for[,2])#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_For,y=Y_True_For_Arrow),#
          aes(x=x,y=y,xend=x,yend=y-Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches"),type="closed"),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "forward", x = XAnnotation, y =#
                   Y_True_For_Arrow,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# reverse arrow#
Y_True_Rev_Arrow = YMAX_Segment#
Y_Arrow_Offset = 100#
X_True_Rev = intersect(df.true[,1],df.rev[,2])#
MyPal = brewer.pal(3,"Reds")#
#
gp = gp + geom_segment(#
          data = data.frame(x=X_True_Rev,y=Y_True_Rev_Arrow),#
          aes(x=x,y=y,xend=x,yend=y+Y_Arrow_Offset),#
          arrow = arrow(angle=15,length=unit(0.1,"inches"),type="closed"),#
          alpha = 0.5,#
          size = 1.2,#
          inherit.aes=F)#
gp = gp + annotate("text", label = "reverse", x = XAnnotation, y =#
                   Y_True_Rev_Arrow ,#
                   size = 6, hjust=1)#
# --------------------------------------------------------------------#
# --------------------------------------------------------------------#
# model node#
Y_Node = Y_PrimerSeg + 500#
#
YMIN_Node= Y_Node - 50#
YMAX_Node= Y_Node + 50#
#
MyPal = brewer.pal(9,"Blues")#
gp = gp + geom_rect(aes(xmin=0,xmax=5e5,ymin=YMIN_Node,ymax=YMAX_Node),fill=MyPal[2],alpha=0.5,inherit.aes=F)#
# --------------------------------------------------------------------#
YMIN_Node_Tick = YMAX_Node#
YMAX_Node_Tick = YMIN_Node_Tick + 50#
#
gp = gp +#
geom_segment(data=df.true,aes(x=x,xend=x,y=YMIN_Node_Tick,yend=YMAX_Node_Tick),inherit.aes=FALSE)#
# --------------------------------------------------------------------#
node_virtual = read.table(File_virtualprimer)#
df.virtual = data.frame(x=rowMeans(node_virtual[,2:3]))#
#YMAX_virtual = YMAX_Node #
#YMIN_virtual = YMAX_Node + 30#
#YLabel_IND = YMAX_Node_Tick +10#
#
#gp = gp +#
#geom_segment(data=df.virtual,aes(x=x,xend=x,y=YMIN_virtual,yend=YMAX_virtual),color="grey50",inherit.aes=FALSE)#
# --------------------------------------------------------------------#
ind.model = sort(c(df.true[,1],df.virtual[,1]))#
label.ind = seq(5,50,by=5)#
df.ind = data.frame(x=ind.model[label.ind],label=label.ind)#
YMAX_Node_Rule = YMIN_Node #
YMIN_Node_Rule = YMAX_Node_Rule - 50#
YLabel_IND = YMIN_Node_Rule -20#
gp = gp +#
geom_segment(data=df.ind,aes(x=x,xend=x,y=YMIN_Node_Rule,yend=YMAX_Node_Rule),inherit.aes=FALSE)#
#
gp = gp + annotate("text", label = "model", x = XAnnotation, y = Y_Node, size =#
                   6, hjust=1)#
gp = gp + geom_text(data=df.ind,aes(x=x, y = YLabel_IND , label=label),#
                    inherit.aes=FALSE,size=6,angle=90,hjust=1)#
#
pdf(file="figs/LinerDiagram.pdf",width=18,height=6)#
  gp#
dev.off()
setwd("/Users/yunxu/workspace/projects/chromatin/script")
!/bin/R#
rm(list=ls())#
#------------------------------------------------------------------#
library(fpc)#
args <- commandArgs(trailingOnly = TRUE)#
if (Sys.info()["sysname"] == "Darwin"){#
	CELL = "GM12878"#
	CELL = "K562"#
	DataDir = paste("/Users/yunxu/workspace/projects/chromatin/result/analysis/ENm008/chain/weight.dist/par.1_1_1_1/",CELL,".p1500_d3300",sep="")#
	ContactFile = paste("/Users/yunxu/workspace/projects/chromatin/script/data/analysis/ENm008/",CELL,".p1500_d3300.c840.a5.sis.node.dst",sep="")#
} else {#
	CELL = args[1]#
	DataDir = #
	paste("/dump/yunxu/working/projects.new/chromatin/result/analysis/ENm008/chain/weight.dist/par.1_1_1_1/",CELL,".p1500_d3300",sep="")#
	ContactFile = paste("/dump/yunxu/working/projects.new/chromatin/script/data/analysis/ENm008/",CELL,".p1500_d3300.c840.a5.sis.node.dst",sep="")#
}#
#
ContactPair = read.table(ContactFile)[,1:2]#
#
ListFile = paste(DataDir,"/List.txt",sep="")#
FNWeight = read.table(ListFile)#
#
# MaxNodes = 54#
# NumRow = nrow(FNWeight)#
# NumCol = MaxNodes*(MaxNodes+1)/2-MaxNodes - (MaxNodes-1)#
# #
# DistIJMatrix = matrix(0,nrow=NumRow,ncol=NumCol)#
# iCount = 1#
# for (i in 1:(MaxNodes-2)){#
# 	for (j in (i+2):MaxNodes){#
# 		cat(i,j,"\n")#
# 		flush.console()#
# 		DistFile = paste(DataDir,"/",i,"_",j,".txt",sep="")#
# 		DistIJMatrix[,iCount] = read.table(DistFile)[,1]#
# 		iCount = iCount + 1#
# 	}#
# }#
NumRow = nrow(FNWeight)#
NumCol = nrow(ContactPair)#
#
DistIJMatrix = matrix(0,nrow=NumRow,ncol=NumCol)#
iCount = 1#
#
for (irow in 1:nrow(ContactPair)){#
	i = ContactPair[irow,1]#
	j = ContactPair[irow,2]#
	cat(i,j,"\n")#
	flush.console()#
	DistFile = paste(DataDir,"/",i,"_",j,".txt",sep="")#
	DistIJMatrix[,iCount] = read.table(DistFile)[,1]#
	iCount = iCount + 1#
}#
#
NumRecord = 300#
NumRecord = NumRow#
ptm <- proc.time()#
RMSDMatrix = dist(DistIJMatrix[1:NumRecord,])/sqrt(NumCol)#
proc.time() - ptm#
#
GetClusterRatio <- function(DS, Weight){#
	# DS = ds#
	# Weight = FNWeight[1:NumRecord,2]#
	Weight.Cluster = cbind(Weight,DS$cluster)#
	TotalWeight = sum(Weight)#
#
	ClusterIndexList = unique(sort(DS$cluster))#
	TotalWeight.Cluster = matrix(,nrow=3,ncol=length(ClusterIndexList))#
	iCount = 1#
	for (i in ClusterIndexList){#
		WeightSum = sum(Weight.Cluster[which(Weight.Cluster[,2]==i),1])#
		WeightRatio = sprintf("%.2f%%",WeightSum*100/TotalWeight)#
		TotalWeight.Cluster[,iCount] = c(i,WeightSum,WeightRatio)#
		iCount = iCount + 1#
	}#
	Weight.DF = data.frame(cluster=ClusterIndexList,weight = as.numeric(TotalWeight.Cluster[2,]),ratio = as.character(TotalWeight.Cluster[3,]),stringsAsFactors = FALSE)#
	return(Weight.DF)#
}#
#
PrintDBSCAN <- function(x, weight, ...){#
	cat("dbscan Pts=", length(x$cluster), " MinPts=", x$MinPts, #
	    " eps=", x$eps, "\n", sep = "")#
	if (is.null(x$isseed)) #
	    tab <- table(x$cluster)#
	else {#
	    tab <- table(c("seed", "border")[2 - x$isseed], cluster = x$cluster)#
	    if (is.null(dim(tab))) {#
	        tab <- cbind(tab)#
	        colnames(tab) <- unique(x$cluster)#
	    }#
	    tab <- rbind(tab, total = colSums(tab))#
	}#
	print(tab, ...)#
	weight.df = GetClusterRatio(x,weight)#
	print(weight.df,...)#
}#
#
if (CELL == "GM12878"){#
	EPSList = c(30:43)*10#
}else{#
	EPSList = c(20:29)*10#
}#
#
for (EPS in EPSList){#
	ds = dbscan(RMSDMatrix,eps=EPS,MinPts=5,method="dist")#
	OutFile = paste("/tmp/",CELL,".eps.",EPS,".cluster.txt",sep="")#
	capture.output(file=OutFile,PrintDBSCAN(ds,weight=FNWeight[1:NumRecord,2]))#
	write.table(#
		file=OutFile,#
		cbind(#
			as.character(FNWeight[1:NumRecord,1]),#
			FNWeight[1:NumRecord,2],#
			ds$cluster,as.numeric(ds$isseed)),#
		append=T,quote=F,row.names=F,col.name=F)	#
}
dbscan
library(fpc)
install.packages("fpc")
!/bin/R#
rm(list=ls())#
#------------------------------------------------------------------#
library(fpc)#
args <- commandArgs(trailingOnly = TRUE)#
if (Sys.info()["sysname"] == "Darwin"){#
	CELL = "GM12878"#
	CELL = "K562"#
	DataDir = paste("/Users/yunxu/workspace/projects/chromatin/result/analysis/ENm008/chain/weight.dist/par.1_1_1_1/",CELL,".p1500_d3300",sep="")#
	ContactFile = paste("/Users/yunxu/workspace/projects/chromatin/script/data/analysis/ENm008/",CELL,".p1500_d3300.c840.a5.sis.node.dst",sep="")#
} else {#
	CELL = args[1]#
	DataDir = #
	paste("/dump/yunxu/working/projects.new/chromatin/result/analysis/ENm008/chain/weight.dist/par.1_1_1_1/",CELL,".p1500_d3300",sep="")#
	ContactFile = paste("/dump/yunxu/working/projects.new/chromatin/script/data/analysis/ENm008/",CELL,".p1500_d3300.c840.a5.sis.node.dst",sep="")#
}#
#
ContactPair = read.table(ContactFile)[,1:2]#
#
ListFile = paste(DataDir,"/List.txt",sep="")#
FNWeight = read.table(ListFile)#
#
# MaxNodes = 54#
# NumRow = nrow(FNWeight)#
# NumCol = MaxNodes*(MaxNodes+1)/2-MaxNodes - (MaxNodes-1)#
# #
# DistIJMatrix = matrix(0,nrow=NumRow,ncol=NumCol)#
# iCount = 1#
# for (i in 1:(MaxNodes-2)){#
# 	for (j in (i+2):MaxNodes){#
# 		cat(i,j,"\n")#
# 		flush.console()#
# 		DistFile = paste(DataDir,"/",i,"_",j,".txt",sep="")#
# 		DistIJMatrix[,iCount] = read.table(DistFile)[,1]#
# 		iCount = iCount + 1#
# 	}#
# }#
NumRow = nrow(FNWeight)#
NumCol = nrow(ContactPair)#
#
DistIJMatrix = matrix(0,nrow=NumRow,ncol=NumCol)#
iCount = 1#
#
for (irow in 1:nrow(ContactPair)){#
	i = ContactPair[irow,1]#
	j = ContactPair[irow,2]#
	cat(i,j,"\n")#
	flush.console()#
	DistFile = paste(DataDir,"/",i,"_",j,".txt",sep="")#
	DistIJMatrix[,iCount] = read.table(DistFile)[,1]#
	iCount = iCount + 1#
}#
#
NumRecord = 300#
NumRecord = NumRow#
ptm <- proc.time()#
RMSDMatrix = dist(DistIJMatrix[1:NumRecord,])/sqrt(NumCol)#
proc.time() - ptm#
#
GetClusterRatio <- function(DS, Weight){#
	# DS = ds#
	# Weight = FNWeight[1:NumRecord,2]#
	Weight.Cluster = cbind(Weight,DS$cluster)#
	TotalWeight = sum(Weight)#
#
	ClusterIndexList = unique(sort(DS$cluster))#
	TotalWeight.Cluster = matrix(,nrow=3,ncol=length(ClusterIndexList))#
	iCount = 1#
	for (i in ClusterIndexList){#
		WeightSum = sum(Weight.Cluster[which(Weight.Cluster[,2]==i),1])#
		WeightRatio = sprintf("%.2f%%",WeightSum*100/TotalWeight)#
		TotalWeight.Cluster[,iCount] = c(i,WeightSum,WeightRatio)#
		iCount = iCount + 1#
	}#
	Weight.DF = data.frame(cluster=ClusterIndexList,weight = as.numeric(TotalWeight.Cluster[2,]),ratio = as.character(TotalWeight.Cluster[3,]),stringsAsFactors = FALSE)#
	return(Weight.DF)#
}#
#
PrintDBSCAN <- function(x, weight, ...){#
	cat("dbscan Pts=", length(x$cluster), " MinPts=", x$MinPts, #
	    " eps=", x$eps, "\n", sep = "")#
	if (is.null(x$isseed)) #
	    tab <- table(x$cluster)#
	else {#
	    tab <- table(c("seed", "border")[2 - x$isseed], cluster = x$cluster)#
	    if (is.null(dim(tab))) {#
	        tab <- cbind(tab)#
	        colnames(tab) <- unique(x$cluster)#
	    }#
	    tab <- rbind(tab, total = colSums(tab))#
	}#
	print(tab, ...)#
	weight.df = GetClusterRatio(x,weight)#
	print(weight.df,...)#
}#
#
if (CELL == "GM12878"){#
	EPSList = c(30:43)*10#
}else{#
	EPSList = c(20:29)*10#
}#
#
for (EPS in EPSList){#
	ds = dbscan(RMSDMatrix,eps=EPS,MinPts=5,method="dist")#
	OutFile = paste("/tmp/",CELL,".eps.",EPS,".cluster.txt",sep="")#
	capture.output(file=OutFile,PrintDBSCAN(ds,weight=FNWeight[1:NumRecord,2]))#
	write.table(#
		file=OutFile,#
		cbind(#
			as.character(FNWeight[1:NumRecord,1]),#
			FNWeight[1:NumRecord,2],#
			ds$cluster,as.numeric(ds$isseed)),#
		append=T,quote=F,row.names=F,col.name=F)	#
}
q()
sin(90)
sin(pi/2)
2*sin(75*pi/180)
sqrt(2)
sqrt(2)*2
2*sin(75*pi/180)+sqrt(2)/2
